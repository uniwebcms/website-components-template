name: Build and Deploy

on:
    # Runs on pushes targeting the default branch
    push:
        branches:
            - main

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
    contents: read
    pages: write
    id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: 'pages'
    cancel-in-progress: false

jobs:
    # prepare data for downstream jobs to use
    prepare:
        runs-on: ubuntu-latest

        # set outputs
        outputs:
            skip_tutorial: ${{ steps.tutorial.outputs.skip_tutorial }}
            release_branch: ${{ steps.branch.outputs.release_branch }}
            public_url: ${{ steps.public_url.outputs.public_url }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Load env from local file
              uses: falti/dotenv-action@v1.1 #https://github.com/falti/dotenv-action
              with:
                  path: .env # path to .env file, relative to the root of the repository
                  keys-case: 'bypass'
                  log-variables: true
                  export-variables: true

            - id: tutorial # read and export the value of the SKIP_BUILD_TUTORIAL variable
              run: echo "skip_tutorial=${SKIP_BUILD_TUTORIAL}" >> "$GITHUB_OUTPUT"
            - id: branch # read and export the value of the RELEASE_BRANCH variable
              run: echo "release_branch=${RELEASE_BRANCH}" >> "$GITHUB_OUTPUT"
            - id: public_url # construct the value of the public_url variable
              run: echo "public_url=https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}" >> "$GITHUB_OUTPUT"

    # build the module and tutorial(optional)
    build:
        # wait until the prepare job to complete successfully
        needs: prepare

        runs-on: ubuntu-latest

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            - name: Set GitHub Pages URL to env
              run: echo "GH_PAGES_URL=${{ needs.prepare.outputs.public_url }}" >> "$GITHUB_ENV"

            - name: Install Dependencies
              run: yarn

            - name: Build Module
              run: yarn build

            - name: Build Manifest
              run: yarn build:manifest
              env:
                  PUBLIC_URL: ${{ needs.prepare.outputs.public_url }}

            - name: Build Tutorial
              if: ${{ needs.prepare.outputs.skip_tutorial != 'true' }}
              run: |
                  echo "Starting build tutorial"
                  yarn build:tutorial:gh

            # Generate the index.html for the GitHub Pages site, it only involves the files generated by the current build
            - name: Generate Index Page
              run: node .github/scripts/generateIndex.js $GITHUB_REPOSITORY

            # upload the dist folder as an artifact for the deploy and release jobs to use, this is just for passing data between jobs, will be cleaned up afterwords
            - name: Upload Artifact for Deploy
              uses: actions/upload-artifact@v4
              with:
                  name: dist
                  path: ./dist

    # deploy the dist for current branch to GitHub Pages
    deploy:
        # wait until the prepare and build job to complete successfully
        needs: [prepare, build]

        # only run this job when the release_branch is not set
        if: ${{ ! needs.prepare.outputs.release_branch }}

        runs-on: ubuntu-latest

        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            # download the artifacts from the build job to the dist folder
            - name: Download Artifact
              uses: actions/download-artifact@v4
              with:
                  name: dist
                  path: dist

            # setup the GitHub Pages environment
            - name: Setup Pages
              uses: actions/configure-pages@v4

            # upload the 'dist' folder as an artifact with specific settings tailored for GitHub Pages. The default name for the artifacts is 'gh-pages'
            - name: Upload Artifact for Github Pages
              uses: actions/upload-pages-artifact@v3
              with:
                  path: dist

            # deploy the dist folder to GitHub Pages
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4

            # clean up the dist folder artifact, which uploaded by the build job
            - name: Clean Inter-job Artifacts
              uses: geekyeggo/delete-artifact@v5
              with:
                  name: dist
                  failOnError: false

    # release the artifact to the release branch, which is hosted by GitHub Pages
    release:
        # wait until the prepare and build job to complete successfully
        needs: [prepare, build]

        # only run this job when the release_branch is set
        if: ${{ needs.prepare.outputs.release_branch }}

        runs-on: ubuntu-latest

        # set write permissions for the peaceiris/actions-gh-pages@v3
        permissions:
            contents: write

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4

            # download the artifacts from the build job to the dist folder
            - name: Download Artifact
              uses: actions/download-artifact@v4
              with:
                  name: dist
                  path: dist

            # deploy the dist folder to the release branch
            - name: Deploy to Release Branch
              uses: peaceiris/actions-gh-pages@v4
              with:
                  github_token: ${{ secrets.GITHUB_TOKEN }}
                  publish_dir: dist # The folder to deploy
                  keep_files: true # keep the files that are not generated by the current build
                  publish_branch: ${{ needs.prepare.outputs.release_branch }} # The branch the action will deploy to

            # clean up the dist folder artifact, which uploaded by the build job
            - name: Clean Inter-job Artifacts
              uses: geekyeggo/delete-artifact@v5
              with:
                  name: dist
                  failOnError: false
